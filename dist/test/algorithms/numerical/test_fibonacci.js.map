{"version":3,"sources":["../../../../test/algorithms/numerical/test_fibonacci.js"],"names":["assert","require","describe","it","equal"],"mappings":";;AAEA;;AAFA,IAAMA,SAASC,QAAQ,MAAR,EAAgBD,MAA/B;;AAKAE,SAAS,wBAAT,EAAmC,YAAM;AACvCC,KAAG,sCAAH,EAA2C;AAAA,WACzCH,OAAOI,KAAP,CAAa,qCAAqB,CAArB,CAAb,EAAsC,CAAtC,CADyC;AAAA,GAA3C;AAGAD,KAAG,sCAAH,EAA2C;AAAA,WACzCH,OAAOI,KAAP,CAAa,qCAAqB,CAArB,CAAb,EAAsC,CAAtC,CADyC;AAAA,GAA3C;AAGAD,KAAG,uCAAH,EAA4C;AAAA,WAC1CH,OAAOI,KAAP,CAAa,qCAAqB,CAArB,CAAb,EAAsC,EAAtC,CAD0C;AAAA,GAA5C;AAGAD,KAAG,+CAAH,EAAoD;AAAA,WAClDH,OAAOI,KAAP,CAAa,qCAAqB,EAArB,CAAb,EAAuC,SAAvC,CADkD;AAAA,GAApD;AAGD,CAbD;;AAeAF,SAAS,uBAAT,EAAkC,YAAM;AACtCC,KAAG,sCAAH,EAA2C;AAAA,WACzCH,OAAOI,KAAP,CAAa,oCAAoB,CAApB,CAAb,EAAqC,CAArC,CADyC;AAAA,GAA3C;AAGAD,KAAG,sCAAH,EAA2C;AAAA,WACzCH,OAAOI,KAAP,CAAa,oCAAoB,CAApB,CAAb,EAAqC,CAArC,CADyC;AAAA,GAA3C;AAGAD,KAAG,uCAAH,EAA4C;AAAA,WAC1CH,OAAOI,KAAP,CAAa,oCAAoB,CAApB,CAAb,EAAqC,EAArC,CAD0C;AAAA,GAA5C;AAGAD,KAAG,+CAAH,EAAoD;AAAA,WAClDH,OAAOI,KAAP,CAAa,oCAAoB,EAApB,CAAb,EAAsC,SAAtC,CADkD;AAAA,GAApD;AAGD,CAbD","file":"test_fibonacci.js","sourcesContent":["const assert = require('chai').assert;\r\n\r\nimport {fibonacciDeclarative} from '../../../src/algorithms/numerical/fibonacci';\r\nimport {fibonacciImperative} from '../../../src/algorithms/numerical/fibonacci';\r\n\r\ndescribe('fibonacciDeclarative()', () => {\r\n  it('should return 1 for base case fib(1)', () =>\r\n    assert.equal(fibonacciDeclarative(1), 1)\r\n  );\r\n  it('should return 1 for base case fib(2)', () =>\r\n    assert.equal(fibonacciDeclarative(2), 1)\r\n  );\r\n  it('should return 21 for base case fib(8)', () =>\r\n    assert.equal(fibonacciDeclarative(8), 21)\r\n  );\r\n  it('should return 102334155 for base case fib(20)', () =>\r\n    assert.equal(fibonacciDeclarative(40), 102334155)\r\n  );\r\n});\r\n\r\ndescribe('fibonacciImperative()', () => {\r\n  it('should return 1 for base case fib(1)', () =>\r\n    assert.equal(fibonacciImperative(1), 1)\r\n  );\r\n  it('should return 1 for base case fib(2)', () =>\r\n    assert.equal(fibonacciImperative(2), 1)\r\n  );\r\n  it('should return 21 for base case fib(8)', () =>\r\n    assert.equal(fibonacciImperative(8), 21)\r\n  );\r\n  it('should return 102334155 for base case fib(20)', () =>\r\n    assert.equal(fibonacciImperative(40), 102334155)\r\n  );\r\n});\r\n"]}